#!/usr/bin/env python3
"""
üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_env_safety():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîê –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    gitignore_path = ".gitignore"
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            gitignore_content = f.read()
            
        if ".env.local" in gitignore_content:
            print("‚úÖ .env.local –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ Git")
        else:
            print("‚ùå .env.local –ù–ï –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ Git - –û–ü–ê–°–ù–û!")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.local —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    if os.path.exists(".env.local"):
        print("‚úÖ .env.local –Ω–∞–π–¥–µ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏)")
    else:
        print("‚ö†Ô∏è  .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")
    
    required_files = [
        ("requirements.txt", "–°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"),
        ("main.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("sentiment_analyzer.py", "–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"),
        ("keyword_extractor.py", "–ú–æ–¥—É–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"),
        ("youtube_service.py", "–°–µ—Ä–≤–∏—Å YouTube API"),
        ("gemini_service.py", "–°–µ—Ä–≤–∏—Å Gemini AI")
    ]
    
    all_good = True
    for filepath, description in required_files:
        if not check_file_exists(filepath, description):
            all_good = False
    
    return all_good

def check_deployment_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("\nüöÄ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:")
    
    deployment_files = [
        ("Procfile", "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Render"),
        ("render.yaml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Render"),
        (".env.example", "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("DEPLOY_COMPLETE_GUIDE.md", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"),
        ("start.sh", "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    ]
    
    all_good = True
    for filepath, description in deployment_files:
        if not check_file_exists(filepath, description):
            all_good = False
    
    return all_good

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("main.py"):
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend/")
        sys.exit(1)
    
    all_checks_passed = True
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    all_checks_passed &= check_dependencies()
    all_checks_passed &= check_deployment_files()
    all_checks_passed &= check_env_safety()
    
    print("\n" + "=" * 50)
    
    if all_checks_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git init && git add . && git commit -m 'Initial commit'")
        print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥: git push origin main")
        print("4. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ Render —Å–æ–≥–ª–∞—Å–Ω–æ DEPLOY_COMPLETE_GUIDE.md")
        print("5. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ Render")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
        sys.exit(1)

if __name__ == "__main__":
    main()
