"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API
"""

import google.generativeai as genai
import os
from typing import Dict, List, Optional
import json
import time

class GeminiService:
    def __init__(self, api_key: Optional[str] = None):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        gemini_keys_env = os.getenv("GEMINI_API_KEYS", "")
        
        if gemini_keys_env:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
            self.api_keys = [key.strip() for key in gemini_keys_env.split(",") if key.strip()]
        else:
            # –ù–ï–¢ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π - —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.api_keys = []
            print("WARNING: No GEMINI_API_KEYS found in environment variables")
        
        print(f"Loaded {len(self.api_keys)} Gemini API keys for rotation")
        self.current_key_index = 0
        self.model = None
        self.model_name = None
        
        self._initialize_with_first_available_key()

    def _initialize_with_first_available_key(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API —Å –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–ª—é—á–æ–º"""
        for i, api_key in enumerate(self.api_keys):
            if self._try_initialize_with_key(api_key):
                self.current_key_index = i
                print(f"Clever AI initialized with key #{i+1}")
                return True
        
        print("Failed to initialize Clever AI with any available key")
        return False

    def _try_initialize_with_key(self, api_key: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
        try:
            genai.configure(api_key=api_key)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ 2.5, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - flash
            available_models = [
                'gemini-2.5-flash',        # –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è 2.5 –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è
                'gemini-2.5-pro'           # –°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –∫–∞–∫ fallback
            ]
            
            for model_name in available_models:
                try:
                    self.model = genai.GenerativeModel(model_name)
                    self.model_name = model_name
                    print(f"Successfully initialized model: {model_name}")
                    return True
                except Exception as model_error:
                    print(f"Failed to initialize {model_name}: {model_error}")
                    continue
            
            return False
        except Exception as e:
            print(f"Failed to initialize with key: {e}")
            return False

    def _rotate_to_next_key(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á"""
        original_index = self.current_key_index
        
        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        for i in range(1, len(self.api_keys)):
            next_index = (self.current_key_index + i) % len(self.api_keys)
            api_key = self.api_keys[next_index]
            
            if self._try_initialize_with_key(api_key):
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                used_key = self.api_keys.pop(self.current_key_index)
                self.api_keys.append(used_key)
                self.current_key_index = next_index if next_index < self.current_key_index else next_index - 1
                print(f"Rotated to key #{next_index+1}")
                return True
        
        print("All API keys exhausted")
        return False

    def analyze_video_with_comments(self, video_url: str, video_info: Dict, comments: List[Dict]) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ Gemini"""
        if not self.model:
            return {
                "error": "Clever AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.",
                "success": False
            }
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            comments_text = self._prepare_comments_for_analysis(comments)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._create_analysis_prompt(video_url, video_info, comments_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_retries = 2
            for attempt in range(max_retries + 1):
                try:
                    response = self.model.generate_content(
                        prompt,
                        generation_config=genai.types.GenerationConfig(
                            temperature=0.7,
                            max_output_tokens=36000,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        )
                    )
                    break  # –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                except Exception as retry_error:
                    if attempt < max_retries and "quota" in str(retry_error).lower():
                        print(f"Quota exceeded, retrying in 5 seconds... (attempt {attempt + 1})")
                        time.sleep(5)
                        continue
                    else:
                        raise retry_error  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            
            if response.text:
                return {
                    "success": True,
                    "analysis": response.text,
                    "timestamp": time.time()
                }
            else:
                return {
                    "error": "Clever AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
                    "success": False
                }
                
        except Exception as e:
            error_message = str(e)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ API
            if "quota" in error_message.lower() or "limit" in error_message.lower():
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫–ª—é—á
                if self._rotate_to_next_key():
                    print("Quota exceeded, trying with next API key...")
                    return self.analyze_video_with_comments(video_url, video_info, comments)
                else:
                    return {
                        "error": "–í—Å–µ API –∫–ª—é—á–∏ Clever AI –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        "success": False
                    }
            elif "safety" in error_message.lower():
                return {
                    "error": "–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Clever AI.",
                    "success": False
                }
            elif "video" in error_message.lower() and "unavailable" in error_message.lower():
                return {
                    "error": "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Clever AI.",
                    "success": False
                }
            else:
                return {
                    "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {error_message}",
                    "success": False
                }

    def _prepare_comments_for_analysis(self, comments: List[Dict]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not comments:
            return "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        # –ë–µ—Ä–µ–º –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        top_comments = sorted(comments, key=lambda x: x.get('likes', 0), reverse=True)
        
        comments_text = "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ö –í–ò–î–ï–û:\n\n"
        
        for i, comment in enumerate(top_comments, 1):
            author = comment.get('author', '–ê–Ω–æ–Ω–∏–º')
            text = comment.get('text', '')
            likes = comment.get('likes', 0)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
            comments_text += f"{i}. {author} ({likes} –ª–∞–π–∫–æ–≤):\n{text}\n\n"
        
        return comments_text

    def _create_analysis_prompt(self, video_url: str, video_info: Dict, comments_text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        video_title = video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        channel_name = video_info.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        views = video_info.get('views', 0)
        likes = video_info.get('likes', 0)
        
        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–í–ò–î–ï–û: {video_title} | –ö–∞–Ω–∞–ª: {channel_name} | –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,} | –õ–∞–π–∫–∏: {likes:,}

{comments_text}

–°–æ–∑–¥–∞–π –ü–û–î–†–û–ë–ù–´–ô –∏ –ü–û–õ–ù–´–ô –æ—Ç—á–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–∫—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:

## üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–ö–¶–ò–ò –ê–£–î–ò–¢–û–†–ò–ò

### ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:
[–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–≤–∞–ª—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤]

### ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
[–ü–æ–¥—Ä–æ–±–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∂–∞–ª–æ–±—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:
[–û–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]

### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
[–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞]

### üìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:
[–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞–Ω–∞–ª–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞]

### üéØ –í—ã–≤–æ–¥—ã –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
[–°–¥–µ–ª–∞–π –æ–±—â–∏–µ –≤—ã–≤–æ–¥—ã –æ —Ä–µ–∞–∫—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏]

–í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ù–µ —Å–æ–∫—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–µ–∞–∫—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""

        return prompt

    def test_connection(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API"""
        if not self.model:
            return {
                "success": False,
                "message": "Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        
        try:
            response = self.model.generate_content("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            return {
                "success": True,
                "message": "Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                "model": self.model_name,
                "response": response.text[:100] + "..." if response.text else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            }
        except Exception as e:
            try:
                print(f"Gemini test error: {e}")
                import traceback
                print(f"Traceback: {traceback.format_exc()}")
            except UnicodeEncodeError:
                print("Gemini test error: [Unicode error]")
                import traceback
                print("Traceback: [Unicode error in traceback]")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            }
