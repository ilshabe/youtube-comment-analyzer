from fastapi import FastAPI, HTTPException, APIRouter
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import requests
import json
from typing import Optional, Dict, List
from dotenv import load_dotenv
import os
import re

from urllib.parse import urlparse, parse_qs

def safe_print(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—á–∞—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    try:
        print(text)
    except UnicodeEncodeError:
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
        safe_text = text.encode('ascii', 'replace').decode('ascii')
        print(safe_text)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from sentiment_analyzer import SentimentAnalyzer
from keyword_extractor import KeywordExtractor
from youtube_service import YouTubeService
from gemini_service import GeminiService

app = FastAPI(title="YouTube Comment Analyzer API")

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è API
api_router = APIRouter(prefix="/api")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
if os.path.exists("../frontend/dist"):
    app.mount("/", StaticFiles(directory="../frontend/dist", html=True), name="frontend")
    safe_print("Frontend mounted from ../frontend/dist")
elif os.path.exists("../frontend/build"):
    app.mount("/", StaticFiles(directory="../frontend/build", html=True), name="frontend")
    safe_print("Frontend mounted from ../frontend/build")
elif os.path.exists("../frontend"):
    app.mount("/", StaticFiles(directory="../frontend", html=True), name="frontend")
    safe_print("Frontend mounted from ../frontend")
elif os.path.exists("static"):
    app.mount("/", StaticFiles(directory="static", html=True), name="static")
    safe_print("Frontend mounted from static")
else:
    safe_print("No frontend directory found")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º .env.local (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏), –ø–æ—Ç–æ–º .env (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
if os.path.exists('.env.local'):
    try:
        load_dotenv('.env.local')
        safe_print("Loaded environment from .env.local (development)")
    except UnicodeDecodeError:
        safe_print("Warning: .env.local file has encoding issues, using system environment variables")
elif os.path.exists('.env'):
    try:
        load_dotenv('.env')
        safe_print("Loaded environment from .env (production)")
    except UnicodeDecodeError:
        safe_print("Warning: .env file has encoding issues, using system environment variables")
else:
    safe_print("No .env file found, using system environment variables")

YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY", "")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
GEMINI_API_KEYS = os.getenv("GEMINI_API_KEYS", "")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –∫–ª—é—á–∏)
safe_print(f"YOUTUBE_API_KEY loaded: {'‚úÖ Yes' if YOUTUBE_API_KEY else '‚ùå No'}")
safe_print(f"GEMINI_API_KEY loaded: {'‚úÖ Yes' if GEMINI_API_KEY else '‚ùå No'}")
safe_print(f"GEMINI_API_KEYS count: {len(GEMINI_API_KEYS.split(',')) if GEMINI_API_KEYS else 0}")
safe_print(f"Current working directory: {os.getcwd()}")
safe_print(f"Environment: {'üöÄ Production' if os.environ.get('PORT') else 'üîß Development'}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
sentiment_analyzer = SentimentAnalyzer()
keyword_extractor = KeywordExtractor()
youtube_service = YouTubeService(YOUTUBE_API_KEY)
gemini_service = GeminiService(GEMINI_API_KEY)  # –ö–ª–∞—Å—Å —Å–∞–º –ø—Ä–æ—á–∏—Ç–∞–µ—Ç GEMINI_API_KEYS

# –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
safe_print(f"YouTube API available: {youtube_service.youtube is not None}")
safe_print(f"Gemini API available: {gemini_service.model is not None}")
if gemini_service.model:
    safe_print(f"Gemini model: {gemini_service.model_name}")

def extract_video_id(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç video_id –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ YouTube URL"""
    return youtube_service.extract_video_id(url)

def validate_video_id(video_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å video_id"""
    return youtube_service.validate_video_id(video_id)

def calculate_engagement_rate(video_info: Dict) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç engagement rate"""
    if video_info['view_count'] > 0:
        total_engagement = video_info['like_count'] + video_info['comment_count']
        return round((total_engagement / video_info['view_count']) * 100, 2)
    return 0.0

def get_popular_comments(comments: List[Dict], top_k: int = 5) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    if not comments:
        return []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ª–∞–π–∫–∞–º–∏ > 0 –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∞–π–∫–∞–º
    liked_comments = [c for c in comments if c.get('likes', 0) > 0]
    
    if not liked_comments:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_comments = comments[:top_k]
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∞–π–∫–∞–º (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_comments = sorted(liked_comments, key=lambda x: x.get('likes', 0), reverse=True)
    
    popular = []
    for comment in sorted_comments[:top_k]:
        popular.append({
            'author': comment.get('author', 'Unknown'),
            'text': comment.get('text', ''),
            'likes': comment.get('likes', 0),
            'author_avatar': comment.get('author_avatar', '')
        })
    
    return popular

@app.get("/analyze")
async def analyze_comments(video_id: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ YouTube –≤–∏–¥–µ–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º NLP –∞–Ω–∞–ª–∏–∑–æ–º
    """
    try:
        if not video_id:
            raise HTTPException(status_code=400, detail="Video ID is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å video_id
        if not validate_video_id(video_id):
            raise HTTPException(status_code=400, detail="Invalid video ID format")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        safe_print(f"Getting video info for: {video_id}")
        video_info = youtube_service.get_video_info(video_id)
        safe_print(f"Video info result: {video_info.get('title', 'N/A') if video_info else 'None'}")
        if video_info:
            safe_print(f"Channel avatar: {video_info.get('channel_avatar', 'None')}")
            safe_print(f"Channel URL: {video_info.get('channel_url', 'None')}")
            safe_print(f"Channel ID: {video_info.get('channel_id', 'None')}")
        if not video_info:
            raise HTTPException(status_code=404, detail="Video not found or unavailable")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        safe_print(f"Getting comments for: {video_id}")
        comments = youtube_service.get_video_comments(video_id, max_results=100)
        safe_print(f"Comments count: {len(comments) if comments else 0}")
        if not comments:
            raise HTTPException(status_code=404, detail="No comments found for this video")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        sentiment_analysis = sentiment_analyzer.analyze_comments(comments)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keyword_analysis = keyword_extractor.analyze_keywords(
            comments, 
            sentiment_analysis.get('language_distribution', {})
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        popular_comments = get_popular_comments(comments, 5)
        
        # –í—ã—á–∏—Å–ª—è–µ–º engagement rate
        engagement_rate = calculate_engagement_rate(video_info)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_comment_length = sum(len(c.get('text', '')) for c in comments) / len(comments) if comments else 0
        total_likes_on_comments = sum(c.get('likes', 0) for c in comments)
        
        return {
            "success": True,
            "video_info": {
                "title": video_info['title'],
                "channel": video_info.get('channel_title', 'Unknown'),
                "channel_title": video_info.get('channel_title', 'Unknown'),
                "channel_avatar": video_info.get('channel_avatar') or f"https://ui-avatars.com/api/?name={video_info.get('channel_title', 'Channel').replace(' ', '+')}&size=240&background=ff0000&color=ffffff&bold=true",
                "channel_url": video_info.get('channel_url', f"https://www.youtube.com/channel/{video_info.get('channel_id', '')}"),
                "views": video_info['view_count'],
                "likes": video_info['like_count'],
                "comments": video_info['comment_count'],
                "engagement_rate": engagement_rate,
                "published_at": video_info.get('published_at', ''),
                "duration": video_info.get('duration', ''),
                "tags": video_info.get('tags', [])
            },
            "sentiment_analysis": sentiment_analysis['sentiment_analysis'],
            "language_distribution": sentiment_analysis.get('language_distribution', {}),
            "average_sentiment": sentiment_analysis.get('average_sentiment', 0.0),
            "keywords": keyword_analysis['keywords'],
            "phrases": keyword_analysis['phrases'],
            "popular_comments": popular_comments,
            "statistics": {
                "total_comments_analyzed": sentiment_analysis.get('total_analyzed', 0),
                "average_comment_length": round(avg_comment_length, 1),
                "total_likes_on_comments": total_likes_on_comments,
                "main_language": keyword_analysis.get('main_language', 'en'),
                "total_words_analyzed": keyword_analysis.get('total_words_analyzed', 0)
            },
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            "themes": {
                "frequently_asked_questions": len([k for k in keyword_analysis['keywords'] if 'how' in k['word'].lower() or '—á—Ç–æ' in k['word'].lower()]),
                "high_priority_pain_points": len([c for c in comments if any(word in c.get('text', '').lower() for word in ['problem', 'issue', 'error', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞'])]),
                "content_requests": len([c for c in comments if any(word in c.get('text', '').lower() for word in ['please', 'can you', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–º–æ–∂–µ—Ç–µ'])]),
                "topics_of_interest": min(len(keyword_analysis['keywords']), 10)
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        safe_print(f"Error in analyze_comments: {e}")
        safe_print(f"Error type: {type(e)}")
        import traceback
        safe_print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Error analyzing comments: {str(e)}")

@app.post("/analyze-url")
async def analyze_by_url(data: dict):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É URL YouTube –≤–∏–¥–µ–æ
    """
    try:
        url = data.get('url', '')
        if not url:
            raise HTTPException(status_code=400, detail="URL is required")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ URL
        video_id = extract_video_id(url)
        if not video_id:
            raise HTTPException(status_code=400, detail="Invalid YouTube URL")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        return await analyze_comments(video_id)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing URL: {str(e)}")

@app.get("/keywords/{video_id}")
async def get_keywords_only(video_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–µ–æ (–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑)
    """
    try:
        if not validate_video_id(video_id):
            raise HTTPException(status_code=400, detail="Invalid video ID format")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = youtube_service.get_video_comments(video_id, max_results=50)
        if not comments:
            raise HTTPException(status_code=404, detail="No comments found")
        
        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞
        languages = {}
        for comment in comments[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
            lang = sentiment_analyzer.detect_language(comment.get('text', ''))
            languages[lang] = languages.get(lang, 0) + 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keyword_analysis = keyword_extractor.analyze_keywords(comments, languages)
        
        return {
            "success": True,
            "keywords": keyword_analysis['keywords'],
            "phrases": keyword_analysis['phrases'],
            "main_language": keyword_analysis.get('main_language', 'en')
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error extracting keywords: {str(e)}")

@app.get("/health")
async def health_check():
    return {
        "status": "healthy", 
        "service": "YouTube Comment Analyzer API - Enhanced",
        "youtube_api": youtube_service.youtube is not None,
        "gemini_api": gemini_service.model is not None,
        "port": os.environ.get("PORT", "8001"),
        "features": [
            "Real NLP sentiment analysis",
            "Keyword extraction with TF-IDF",
            "Multi-language support (EN/RU)",
            "YouTube API integration",
            "Advanced statistics",
            "Clever AI video analysis"
        ]
    }

@app.get("/ping")
async def ping():
    import time
    return {"message": "pong", "timestamp": time.time()}

@app.get("/test-avatar/{video_id}")
async def test_avatar(video_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not validate_video_id(video_id):
            raise HTTPException(status_code=400, detail="Invalid video ID format")
        
        video_info = youtube_service.get_video_info(video_id)
        if not video_info:
            raise HTTPException(status_code=404, detail="Video not found")
        
        return {
            "success": True,
            "video_id": video_id,
            "channel_title": video_info.get('channel_title'),
            "channel_id": video_info.get('channel_id'),
            "channel_avatar": video_info.get('channel_avatar'),
            "channel_url": video_info.get('channel_url'),
            "fallback_avatar": f"https://ui-avatars.com/api/?name={video_info.get('channel_title', 'Channel').replace(' ', '+')}&size=240&background=ff0000&color=ffffff&bold=true"
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")

@app.get("/test-gemini")
async def test_gemini():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API"""
    result = gemini_service.test_connection()
    if result['success']:
        return result
    else:
        raise HTTPException(status_code=500, detail=result['message'])

@app.get("/gemini-status")
async def gemini_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–≤–æ—Ç—ã Gemini API"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        test_result = gemini_service.test_connection()
        
        return {
            "api_key_configured": gemini_service.api_key is not None,
            "model_initialized": gemini_service.model is not None,
            "current_model": gemini_service.model_name,
            "test_connection": test_result,
            "recommendations": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gemini-1.5-flash –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã",
                "–õ–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, 1500 –≤ –¥–µ–Ω—å",
                "–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã"
            ]
        }
    except Exception as e:
        return {
            "error": str(e),
            "api_key_configured": gemini_service.api_key is not None,
            "model_initialized": False
        }

@app.post("/gemini-analysis")
async def gemini_analysis(data: dict):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ Gemini AI
    """
    try:
        video_id = data.get('video_id', '')
        if not video_id:
            raise HTTPException(status_code=400, detail="Video ID is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å video_id
        if not validate_video_id(video_id):
            raise HTTPException(status_code=400, detail="Invalid video ID format")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = youtube_service.get_video_info(video_id)
        if not video_info:
            raise HTTPException(status_code=404, detail="Video not found or unavailable")
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç)
        comments = youtube_service.get_video_comments(video_id, max_results=200)
        if not comments:
            raise HTTPException(status_code=404, detail="No comments found for this video")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–∏–¥–µ–æ
        video_url = f"https://www.youtube.com/watch?v={video_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Gemini
        analysis_result = gemini_service.analyze_video_with_comments(
            video_url, video_info, comments
        )
        
        if not analysis_result.get('success'):
            raise HTTPException(
                status_code=500, 
                detail=analysis_result.get('error', 'Unknown error occurred')
            )
        
        return {
            "success": True,
            "video_info": {
                "title": video_info['title'],
                "channel": video_info.get('channel_title', 'Unknown'),
                "channel_avatar": video_info.get('channel_avatar') or f"https://ui-avatars.com/api/?name={video_info.get('channel_title', 'Channel').replace(' ', '+')}&size=240&background=ff0000&color=ffffff&bold=true",
                "channel_url": video_info.get('channel_url', f"https://www.youtube.com/channel/{video_info.get('channel_id', '')}"),
                "views": video_info['view_count'],
                "likes": video_info['like_count'],
                "comments_analyzed": len(comments)
            },
            "gemini_analysis": analysis_result['analysis'],
            "timestamp": analysis_result['timestamp']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        safe_print(f"Error in gemini_analysis: {e}")
        raise HTTPException(status_code=500, detail=f"Error during Gemini analysis: {str(e)}")

# –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@app.get("/assets/{file_path:path}")
async def serve_assets(file_path: str):
    """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    frontend_paths = ["../frontend/dist", "../frontend/build", "../frontend", "static", "frontend"]
    
    for frontend_dir in frontend_paths:
        asset_path = f"{frontend_dir}/assets/{file_path}"
        if os.path.exists(asset_path) and os.path.isfile(asset_path):
            return FileResponse(asset_path)
    
    raise HTTPException(status_code=404, detail="Asset not found")

# –¢–µ—Å—Ç–æ–≤—ã–π API endpoint (—Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ)
@app.get("/test-api")
async def test_api():
    return {
        "message": "YouTube Comment Analyzer API - Enhanced with Real NLP",
        "youtube_api_available": youtube_service.youtube is not None,
        "gemini_api_available": gemini_service.model is not None,
        "gemini_model": gemini_service.model_name if gemini_service.model else None,
        "status": "API is working!"
    }

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@app.get("/")
async def serve_index():
    """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    frontend_paths = ["../frontend/dist", "../frontend/build", "../frontend", "static", "frontend"]
    
    for frontend_dir in frontend_paths:
        index_path = f"{frontend_dir}/index.html"
        if os.path.exists(index_path):
            return FileResponse(index_path)
    
    # Fallback –Ω–∞ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    return {
        "message": "YouTube Comment Analyzer API - Enhanced with Real NLP",
        "youtube_api_available": youtube_service.youtube is not None,
        "gemini_api_available": gemini_service.model is not None,
        "gemini_model": gemini_service.model_name if gemini_service.model else None
    }

# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ SPA —Ä–æ—É—Ç—ã (–¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
@app.get("/dashboard")
@app.get("/settings") 
@app.get("/about")
async def serve_spa_routes():
    """–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ SPA —Ä–æ—É—Ç—ã"""
    frontend_paths = ["../frontend/dist", "../frontend/build", "../frontend", "static", "frontend"]
    
    for frontend_dir in frontend_paths:
        index_path = f"{frontend_dir}/index.html"
        if os.path.exists(index_path):
            return FileResponse(index_path)
    
    raise HTTPException(status_code=404, detail="Frontend not found")

if __name__ == "__main__":
    import uvicorn
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–∞—Ö
    safe_print("üîß Registered routes:")
    for route in app.routes:
        if hasattr(route, 'path') and hasattr(route, 'methods'):
            safe_print(f"  {route.methods} {route.path}")
    
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT, –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000
    port = int(os.environ.get("PORT", 8000))
    safe_print(f"üöÄ Starting YouTube Comment Analyzer on port {port}")
    safe_print(f"üåê Environment: {'Production' if os.environ.get('PORT') else 'Development'}")
    safe_print(f"üîó Binding to host: 0.0.0.0:{port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Render
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port, 
        log_level="info",
        access_log=True,
        server_header=False,
        date_header=False
    )
